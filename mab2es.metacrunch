Bundler.require(:default, :development)

require_relative "etc/helper"
require_relative "etc/mapping"
require_relative "etc/settings"

#
# Options
#
options(require_args: true) do
  add :url, "-u", "--url URL", String, "Elasticsearch url", default: "localhost:9200"
  add :index, "-i", "--index STRING", String, "Elasticsearch index name", required: true
  add :type, "-t", "--type STRING", String, "Elasticsearch type", default: "aleph_record"
  add :number_of_replicas, "-r", "--replicas NUMBER", Integer, default: 0
  add :number_of_procs, "-n", "--number-of-procs NUMBER", Integer, default: 1
  add :bulk_size, "-b", "--bulk NUMBER", Integer, default: 1000
end

#
# Local definements
#
SETTINGS[:index][:number_of_replicas] = options[:number_of_replicas]

mab2primo_transformation = Metacrunch::UBPB::Transformations::MabToPrimo.new
primo2es_transformation = Metacrunch::UBPB::Transformations::PrimoToElasticsearch.new

es_index_creator = Metacrunch::Elasticsearch::IndexCreator.new({
  delete_existing_index: false,
  default_mapping: MAPPING,
  index: options[:index],
  logger: Logger.new(STDOUT),
  settings: SETTINGS,
  url: options[:url]
})

es_indexer = Metacrunch::Elasticsearch::Indexer.new({
  id_accessor: -> (item) { item["id"] },
  index: options[:index],
  logger: Logger.new(STDOUT),
  type: options[:type],
  url: options[:url]
})


#
# pre/post process helper
#
pre_process { puts "Process started...".colorize(:yellow) }
pre_process es_index_creator
post_process { puts "Process finished.".colorize(:yellow) }


#
# Source
#
source Metacrunch::Fs::Reader.new(args)


#
# Transformation steps
#
transformation_buffer(options[:bulk_size])

transformation do |files|
  Parallel.map(files, in_processes: options[:number_of_procs] <= 1 ? 0 : options[:number_of_procs]) do |file|
    mab2primo_result = mab2primo_transformation.call(file.contents)
    decode_json!(mab2primo_result)
    primo2es_transformation.call(mab2primo_result)
  end
end

transformation do |bulk|
  es_indexer.call(bulk)
end
