Bundler.require(:default, :development)

# Define job options
options(require_args: false) do
  # Database
  add :db_host, "--db-host HOSTNAME", "The database host", String, default: "localhost"
  add :db_port, "--db-port PORT", "The database port", Integer, default: 1521
  add :db_name, "--db-name NAME", "The database name", String, default: "aleph22"
  add :db_user, "--db-user USERNAME", "The database username", String, required: true
  add :db_password, "--db-password PASSWORD", "The database password", String, required: true
  # Redis
  add :redis_url, "--redis-url URL", "Redis url", String, default: "redis://localhost:6379/metacrunch"
  add :redis_list_name, "--redis-list NAME", "Redis list name", String, default: "publishing-jobs"
  # Loglevel
  add :log_level, "--log-level LEVEL", "The log level", String, default: "error"
  # Timestamp
  add :last_run, "--last-run DATETIME", "Only fetch records that have been updated since DATETIME", String, required: true
end

# Setup a logger
logger = Logger.new(STDOUT)
logger.level = options[:log_level]

# Setup redis
redis_conn = Redis.new(url: options[:redis_url])

# Setup Oracle connection.
# If you need an ssh tunnel use: ssh -L 1521:localhost:1521 your_oracle_box
DB = Sequel.oracle(
  options[:db_name],
  user: options[:db_user],
  password: options[:db_password],
  host: options[:db_host],
  port: options[:db_port],
  logger: logger
)

# Prepare the dataset
last_run = Time.parse(options[:last_run]).utc.strftime("%Y%m%d%H%M%L")
dataset  = DB.from(Sequel[:pad50][:z00p]).order(:z00p_doc_number).where{z00p_timestamp >= last_run}
count    = dataset.count

# Set the source
source Metacrunch::DB::Source.new(dataset, rows_per_fetch: 6000)

# Setup a progress bar
progress_bar = ProgressBar.create(
  title: "Progress",
  total: count,
  format: "%t: |%B| %p%% %e",
  throttle_rate: 1,
  autostart: false
)

# Pre process hook
pre_process -> {
  puts "Cleaning up Redis list '#{options[:redis_list_name]}' to get a fresh start..."
  redis_conn.del(options[:redis_list_name])

  puts "Processing #{count} records..."
  progress_bar.start
}

# Post process hook
post_process -> {
  progress_bar.finish
}

# Extract the required data from z00p.
transformation ->(db_row) {
  progress_bar.increment

  (db_row[:z00p_str] || db_row[:z00p_ptr])
}

# Create bulk records and convert to json to feed into redis
transformation ->(marc_xml_bulk) {
  marc_xml_bulk.to_json
}, buffer: 200

# Write to destination
destination Metacrunch::Redis::QueueDestination.new(redis_conn, options[:redis_list_name])
