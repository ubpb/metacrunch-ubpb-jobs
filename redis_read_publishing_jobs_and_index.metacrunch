Bundler.require(:default, :development)

require_relative "etc/helper"
require_relative "etc/mapping"
require_relative "etc/mapping_es6"
require_relative "etc/settings"

# Define job options
options(require_args: false) do
  # Redis
  add :redis_url, "--redis-url URL", "Redis url", String, default: "redis://localhost:6379/metacrunch"
  add :redis_list_name, "--redis-list NAME", "Redis list name", String, default: "publishing-jobs"
  # Elasticsearch
  add :es_url,   "--es-url URL", String, "Elasticsearch url", default: "http://localhost:9200"
  add :es_index, "--es-index STRING", String, "Elasticsearch index name", required: true
  add :es_mode,  "--es-mode MODE", Integer, "Compatability for ES 2.x=2 or 6.x=6", default: 2
  # Loglevel
  add :log_level, "--log-level LEVEL", "The log level", String, default: "error"
end

# Setup a logger
logger = Logger.new(STDOUT)
logger.level = options[:log_level]

# Setup redis
redis_conn = Redis.new(url: options[:redis_url])

# Setup MAB transformations
mab2primo_transformation = Metacrunch::UBPB::Transformations::MabToPrimo.new
primo2es_transformation = Metacrunch::UBPB::Transformations::PrimoToElasticsearch.new

# Setup Elasticsearch
elasticsearch = Elasticsearch::Client.new(url: options[:es_url], logger: logger)
# ... create index if the index doesn't exists
unless elasticsearch.indices.exists?(index: options[:es_index])
  elasticsearch.indices.create(
    index: options[:es_index],
    body: {
      settings: SETTINGS,
      mappings: case options[:es_mode]
      when 6 then MAPPING_ES6
      else MAPPING
      end
    }
  )
end

# Set the source
source Metacrunch::Redis::QueueSource.new(redis_conn, options[:redis_list_name], blocking_mode: true)

pre_process -> {
  puts "Worker started. Waiting for data..."
}

# Extract and parse Redis json payload
transformation ->(redis_result) {
  JSON.parse(redis_result)
}

# Transform mab data to our intermediate format for indexing
transformation ->(marc_xml) {
  mab2primo_result = mab2primo_transformation.call(marc_xml)
  decode_json!(mab2primo_result)
  primo2es_transformation.call(mab2primo_result)
}

transformation ->(data) {
  id = data["id"]
  if id.present?
    if data["status"] == "D"
      [
        {
          delete: {
            _index: options[:es_index],
            _type: "aleph_record",
            _id: id
          }
        }
      ]
    else
      [
        {
          index: {
            _index: options[:es_index],
            _type: "aleph_record",
            _id: id,
            data: data
          }
        }
      ]
    end
  else
    raise "No ID for record. This must not happen!"
  end
}

# Write data into elasticsearch
destination Metacrunch::Elasticsearch::Destination.new(elasticsearch, result_callback: ->(result) {
  print "." # Show some progress

  if result["errors"]
    error_items = result["items"].select{|i| i["index"]["error"].present?}
    error_items.each do |ei|
      puts "ERROR: Record: #{ei["index"]["_id"]}, Reason: #{ei["index"]["error"]["reason"]}"
    end
  end
})
