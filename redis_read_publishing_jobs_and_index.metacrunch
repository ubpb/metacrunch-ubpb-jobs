Bundler.require
require "pry-byebug"

require_relative "etc/helper"
require_relative "etc/mapping"
require_relative "etc/settings"

# Define job options
options(require_args: false) do
  # Redis
  add :redis_url, "--redis-url", "Redis url", String, default: "localhost"
  add :redis_port, "--redis-port", "Redis port", String, default: "6379"
  add :redis_list_name, "--redis-list", "Redis list name", String, default: "publishing-jobs"
  # Elasticsearch
  add :es_url,   "--es-url URL", String, "Elasticsearch url", default: "localhost:9200"
  add :es_index, "--es-index STRING", String, "Elasticsearch index name", required: true
end

# Setup a logger
logger = Logger.new(STDOUT)
logger.level = Logger::INFO

# Setup redis
redis_conn = ::Redis.new(host: options[:redis_url], port: options[:redis_port])

# Setup MAB transformations
mab2primo_transformation = Metacrunch::UBPB::Transformations::MabToPrimo.new
primo2es_transformation = Metacrunch::UBPB::Transformations::PrimoToElasticsearch.new

# Setup Elasticsearch
SETTINGS[:index][:number_of_replicas] = 0

es_index_creator = Metacrunch::Elasticsearch::IndexCreator.new({
  delete_existing_index: false,
  default_mapping: MAPPING,
  settings: SETTINGS,
  url: options[:es_url],
  index: options[:es_index],
  logger: logger
})
es_indexer = Metacrunch::Elasticsearch::Indexer.new({
  id_accessor: -> (item) { item["id"] },
  url: options[:es_url],
  index: options[:es_index],
  type: "aleph_record",
  logger: logger
})


# Set the source
source Metacrunch::Redis::QueueReader.new(redis_conn, options[:redis_list_name], blocking: true, blocking_timeout: 10)

# Pre process hook. Creates the ES index if it doesn't exists.
pre_process es_index_creator

# Transform mab data to our intermediate format for indexing
transformation do |data|
  mab2primo_result = mab2primo_transformation.call(data["data"])
  decode_json!(mab2primo_result)
  primo2es_transformation.call(mab2primo_result)
end

# Use bulks of 1000 records
transformation_buffer(1000)

# Write the bulks to ES
transformation do |bulk|
  es_indexer.call(bulk)
end
